// Code generated by mockery v2.32.0. DO NOT EDIT.

package apn

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// MockuserIDDecoder is an autogenerated mock type for the userIDDecoder type
type MockuserIDDecoder struct {
	mock.Mock
}

type MockuserIDDecoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockuserIDDecoder) EXPECT() *MockuserIDDecoder_Expecter {
	return &MockuserIDDecoder_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: ctx
func (_m *MockuserIDDecoder) Decode(ctx context.Context) (pgtype.UUID, error) {
	ret := _m.Called(ctx)

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgtype.UUID, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgtype.UUID); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockuserIDDecoder_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockuserIDDecoder_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockuserIDDecoder_Expecter) Decode(ctx interface{}) *MockuserIDDecoder_Decode_Call {
	return &MockuserIDDecoder_Decode_Call{Call: _e.mock.On("Decode", ctx)}
}

func (_c *MockuserIDDecoder_Decode_Call) Run(run func(ctx context.Context)) *MockuserIDDecoder_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockuserIDDecoder_Decode_Call) Return(_a0 pgtype.UUID, _a1 error) *MockuserIDDecoder_Decode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockuserIDDecoder_Decode_Call) RunAndReturn(run func(context.Context) (pgtype.UUID, error)) *MockuserIDDecoder_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockuserIDDecoder creates a new instance of MockuserIDDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockuserIDDecoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockuserIDDecoder {
	mock := &MockuserIDDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
