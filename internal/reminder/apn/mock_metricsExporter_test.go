// Code generated by mockery v2.32.0. DO NOT EDIT.

package apn

import (
	prometheusexporter "github.com/zhuboris/never-expires/internal/shared/prometheusexporter"
	mock "github.com/stretchr/testify/mock"
)

// MockmetricsExporter is an autogenerated mock type for the metricsExporter type
type MockmetricsExporter struct {
	mock.Mock
}

type MockmetricsExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockmetricsExporter) EXPECT() *MockmetricsExporter_Expecter {
	return &MockmetricsExporter_Expecter{mock: &_m.Mock}
}

// NewAttemptsCounter provides a mock function with given fields: entityName
func (_m *MockmetricsExporter) NewAttemptsCounter(entityName string) (*prometheusexporter.AttemptsCounter, error) {
	ret := _m.Called(entityName)

	var r0 *prometheusexporter.AttemptsCounter
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*prometheusexporter.AttemptsCounter, error)); ok {
		return rf(entityName)
	}
	if rf, ok := ret.Get(0).(func(string) *prometheusexporter.AttemptsCounter); ok {
		r0 = rf(entityName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheusexporter.AttemptsCounter)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(entityName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockmetricsExporter_NewAttemptsCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAttemptsCounter'
type MockmetricsExporter_NewAttemptsCounter_Call struct {
	*mock.Call
}

// NewAttemptsCounter is a helper method to define mock.On call
//   - entityName string
func (_e *MockmetricsExporter_Expecter) NewAttemptsCounter(entityName interface{}) *MockmetricsExporter_NewAttemptsCounter_Call {
	return &MockmetricsExporter_NewAttemptsCounter_Call{Call: _e.mock.On("NewAttemptsCounter", entityName)}
}

func (_c *MockmetricsExporter_NewAttemptsCounter_Call) Run(run func(entityName string)) *MockmetricsExporter_NewAttemptsCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockmetricsExporter_NewAttemptsCounter_Call) Return(_a0 *prometheusexporter.AttemptsCounter, _a1 error) *MockmetricsExporter_NewAttemptsCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockmetricsExporter_NewAttemptsCounter_Call) RunAndReturn(run func(string) (*prometheusexporter.AttemptsCounter, error)) *MockmetricsExporter_NewAttemptsCounter_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimeRecorder provides a mock function with given fields: name
func (_m *MockmetricsExporter) NewTimeRecorder(name string) (*prometheusexporter.TimeRecorded, error) {
	ret := _m.Called(name)

	var r0 *prometheusexporter.TimeRecorded
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*prometheusexporter.TimeRecorded, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *prometheusexporter.TimeRecorded); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheusexporter.TimeRecorded)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockmetricsExporter_NewTimeRecorder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTimeRecorder'
type MockmetricsExporter_NewTimeRecorder_Call struct {
	*mock.Call
}

// NewTimeRecorder is a helper method to define mock.On call
//   - name string
func (_e *MockmetricsExporter_Expecter) NewTimeRecorder(name interface{}) *MockmetricsExporter_NewTimeRecorder_Call {
	return &MockmetricsExporter_NewTimeRecorder_Call{Call: _e.mock.On("NewTimeRecorder", name)}
}

func (_c *MockmetricsExporter_NewTimeRecorder_Call) Run(run func(name string)) *MockmetricsExporter_NewTimeRecorder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockmetricsExporter_NewTimeRecorder_Call) Return(_a0 *prometheusexporter.TimeRecorded, _a1 error) *MockmetricsExporter_NewTimeRecorder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockmetricsExporter_NewTimeRecorder_Call) RunAndReturn(run func(string) (*prometheusexporter.TimeRecorded, error)) *MockmetricsExporter_NewTimeRecorder_Call {
	_c.Call.Return(run)
	return _c
}

// WriteToFile provides a mock function with given fields: path
func (_m *MockmetricsExporter) WriteToFile(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockmetricsExporter_WriteToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteToFile'
type MockmetricsExporter_WriteToFile_Call struct {
	*mock.Call
}

// WriteToFile is a helper method to define mock.On call
//   - path string
func (_e *MockmetricsExporter_Expecter) WriteToFile(path interface{}) *MockmetricsExporter_WriteToFile_Call {
	return &MockmetricsExporter_WriteToFile_Call{Call: _e.mock.On("WriteToFile", path)}
}

func (_c *MockmetricsExporter_WriteToFile_Call) Run(run func(path string)) *MockmetricsExporter_WriteToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockmetricsExporter_WriteToFile_Call) Return(_a0 error) *MockmetricsExporter_WriteToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockmetricsExporter_WriteToFile_Call) RunAndReturn(run func(string) error) *MockmetricsExporter_WriteToFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockmetricsExporter creates a new instance of MockmetricsExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockmetricsExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockmetricsExporter {
	mock := &MockmetricsExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
