// Code generated by mockery v2.32.0. DO NOT EDIT.

package apn

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// MockdeviceRepo is an autogenerated mock type for the deviceRepo type
type MockdeviceRepo struct {
	mock.Mock
}

type MockdeviceRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdeviceRepo) EXPECT() *MockdeviceRepo_Expecter {
	return &MockdeviceRepo_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: ctx
func (_m *MockdeviceRepo) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdeviceRepo_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockdeviceRepo_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockdeviceRepo_Expecter) Ping(ctx interface{}) *MockdeviceRepo_Ping_Call {
	return &MockdeviceRepo_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockdeviceRepo_Ping_Call) Run(run func(ctx context.Context)) *MockdeviceRepo_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockdeviceRepo_Ping_Call) Return(_a0 error) *MockdeviceRepo_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdeviceRepo_Ping_Call) RunAndReturn(run func(context.Context) error) *MockdeviceRepo_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// addDeviceToken provides a mock function with given fields: ctx, userID, token
func (_m *MockdeviceRepo) addDeviceToken(ctx context.Context, userID pgtype.UUID, token string) error {
	ret := _m.Called(ctx, userID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, string) error); ok {
		r0 = rf(ctx, userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdeviceRepo_addDeviceToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'addDeviceToken'
type MockdeviceRepo_addDeviceToken_Call struct {
	*mock.Call
}

// addDeviceToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - token string
func (_e *MockdeviceRepo_Expecter) addDeviceToken(ctx interface{}, userID interface{}, token interface{}) *MockdeviceRepo_addDeviceToken_Call {
	return &MockdeviceRepo_addDeviceToken_Call{Call: _e.mock.On("addDeviceToken", ctx, userID, token)}
}

func (_c *MockdeviceRepo_addDeviceToken_Call) Run(run func(ctx context.Context, userID pgtype.UUID, token string)) *MockdeviceRepo_addDeviceToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockdeviceRepo_addDeviceToken_Call) Return(_a0 error) *MockdeviceRepo_addDeviceToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdeviceRepo_addDeviceToken_Call) RunAndReturn(run func(context.Context, pgtype.UUID, string) error) *MockdeviceRepo_addDeviceToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdeviceRepo creates a new instance of MockdeviceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdeviceRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdeviceRepo {
	mock := &MockdeviceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
