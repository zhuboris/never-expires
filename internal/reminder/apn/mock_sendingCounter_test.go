// Code generated by mockery v2.32.0. DO NOT EDIT.

package apn

import mock "github.com/stretchr/testify/mock"

// MocksendingCounter is an autogenerated mock type for the sendingCounter type
type MocksendingCounter struct {
	mock.Mock
}

type MocksendingCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksendingCounter) EXPECT() *MocksendingCounter_Expecter {
	return &MocksendingCounter_Expecter{mock: &_m.Mock}
}

// IncrementFail provides a mock function with given fields:
func (_m *MocksendingCounter) IncrementFail() {
	_m.Called()
}

// MocksendingCounter_IncrementFail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementFail'
type MocksendingCounter_IncrementFail_Call struct {
	*mock.Call
}

// IncrementFail is a helper method to define mock.On call
func (_e *MocksendingCounter_Expecter) IncrementFail() *MocksendingCounter_IncrementFail_Call {
	return &MocksendingCounter_IncrementFail_Call{Call: _e.mock.On("IncrementFail")}
}

func (_c *MocksendingCounter_IncrementFail_Call) Run(run func()) *MocksendingCounter_IncrementFail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocksendingCounter_IncrementFail_Call) Return() *MocksendingCounter_IncrementFail_Call {
	_c.Call.Return()
	return _c
}

func (_c *MocksendingCounter_IncrementFail_Call) RunAndReturn(run func()) *MocksendingCounter_IncrementFail_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementSuccess provides a mock function with given fields:
func (_m *MocksendingCounter) IncrementSuccess() {
	_m.Called()
}

// MocksendingCounter_IncrementSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementSuccess'
type MocksendingCounter_IncrementSuccess_Call struct {
	*mock.Call
}

// IncrementSuccess is a helper method to define mock.On call
func (_e *MocksendingCounter_Expecter) IncrementSuccess() *MocksendingCounter_IncrementSuccess_Call {
	return &MocksendingCounter_IncrementSuccess_Call{Call: _e.mock.On("IncrementSuccess")}
}

func (_c *MocksendingCounter_IncrementSuccess_Call) Run(run func()) *MocksendingCounter_IncrementSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocksendingCounter_IncrementSuccess_Call) Return() *MocksendingCounter_IncrementSuccess_Call {
	_c.Call.Return()
	return _c
}

func (_c *MocksendingCounter_IncrementSuccess_Call) RunAndReturn(run func()) *MocksendingCounter_IncrementSuccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksendingCounter creates a new instance of MocksendingCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksendingCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksendingCounter {
	mock := &MocksendingCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
