// Code generated by mockery v2.32.0. DO NOT EDIT.

package apn

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockbadTokensGettingRepo is an autogenerated mock type for the badTokensGettingRepo type
type MockbadTokensGettingRepo struct {
	mock.Mock
}

type MockbadTokensGettingRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbadTokensGettingRepo) EXPECT() *MockbadTokensGettingRepo_Expecter {
	return &MockbadTokensGettingRepo_Expecter{mock: &_m.Mock}
}

// popBadTokens provides a mock function with given fields: ctx, limit
func (_m *MockbadTokensGettingRepo) popBadTokens(ctx context.Context, limit int64) ([]string, error) {
	ret := _m.Called(ctx, limit)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]string, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbadTokensGettingRepo_popBadTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'popBadTokens'
type MockbadTokensGettingRepo_popBadTokens_Call struct {
	*mock.Call
}

// popBadTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
func (_e *MockbadTokensGettingRepo_Expecter) popBadTokens(ctx interface{}, limit interface{}) *MockbadTokensGettingRepo_popBadTokens_Call {
	return &MockbadTokensGettingRepo_popBadTokens_Call{Call: _e.mock.On("popBadTokens", ctx, limit)}
}

func (_c *MockbadTokensGettingRepo_popBadTokens_Call) Run(run func(ctx context.Context, limit int64)) *MockbadTokensGettingRepo_popBadTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockbadTokensGettingRepo_popBadTokens_Call) Return(_a0 []string, _a1 error) *MockbadTokensGettingRepo_popBadTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbadTokensGettingRepo_popBadTokens_Call) RunAndReturn(run func(context.Context, int64) ([]string, error)) *MockbadTokensGettingRepo_popBadTokens_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbadTokensGettingRepo creates a new instance of MockbadTokensGettingRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbadTokensGettingRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbadTokensGettingRepo {
	mock := &MockbadTokensGettingRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
