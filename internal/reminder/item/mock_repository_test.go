// Code generated by mockery v2.32.0. DO NOT EDIT.

package item

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// Mockrepository is an autogenerated mock type for the repository type
type Mockrepository struct {
	mock.Mock
}

type Mockrepository_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockrepository) EXPECT() *Mockrepository_Expecter {
	return &Mockrepository_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: ctx
func (_m *Mockrepository) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockrepository_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Mockrepository_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockrepository_Expecter) Ping(ctx interface{}) *Mockrepository_Ping_Call {
	return &Mockrepository_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *Mockrepository_Ping_Call) Run(run func(ctx context.Context)) *Mockrepository_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockrepository_Ping_Call) Return(_a0 error) *Mockrepository_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockrepository_Ping_Call) RunAndReturn(run func(context.Context) error) *Mockrepository_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// add provides a mock function with given fields: ctx, userID, storageID, toAdd
func (_m *Mockrepository) add(ctx context.Context, userID pgtype.UUID, storageID pgtype.UUID, toAdd Item) (bool, bool, *Item, error) {
	ret := _m.Called(ctx, userID, storageID, toAdd)

	var r0 bool
	var r1 bool
	var r2 *Item
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, pgtype.UUID, Item) (bool, bool, *Item, error)); ok {
		return rf(ctx, userID, storageID, toAdd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, pgtype.UUID, Item) bool); ok {
		r0 = rf(ctx, userID, storageID, toAdd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, pgtype.UUID, Item) bool); ok {
		r1 = rf(ctx, userID, storageID, toAdd)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, pgtype.UUID, pgtype.UUID, Item) *Item); ok {
		r2 = rf(ctx, userID, storageID, toAdd)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*Item)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, pgtype.UUID, pgtype.UUID, Item) error); ok {
		r3 = rf(ctx, userID, storageID, toAdd)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Mockrepository_add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'add'
type Mockrepository_add_Call struct {
	*mock.Call
}

// add is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - storageID pgtype.UUID
//   - toAdd Item
func (_e *Mockrepository_Expecter) add(ctx interface{}, userID interface{}, storageID interface{}, toAdd interface{}) *Mockrepository_add_Call {
	return &Mockrepository_add_Call{Call: _e.mock.On("add", ctx, userID, storageID, toAdd)}
}

func (_c *Mockrepository_add_Call) Run(run func(ctx context.Context, userID pgtype.UUID, storageID pgtype.UUID, toAdd Item)) *Mockrepository_add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(pgtype.UUID), args[3].(Item))
	})
	return _c
}

func (_c *Mockrepository_add_Call) Return(isStorageExist bool, isAdded bool, newItem *Item, err error) *Mockrepository_add_Call {
	_c.Call.Return(isStorageExist, isAdded, newItem, err)
	return _c
}

func (_c *Mockrepository_add_Call) RunAndReturn(run func(context.Context, pgtype.UUID, pgtype.UUID, Item) (bool, bool, *Item, error)) *Mockrepository_add_Call {
	_c.Call.Return(run)
	return _c
}

// all provides a mock function with given fields: ctx, userID, filters
func (_m *Mockrepository) all(ctx context.Context, userID pgtype.UUID, filters ...Filter) (*Items, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Items
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, ...Filter) (*Items, error)); ok {
		return rf(ctx, userID, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, ...Filter) *Items); ok {
		r0 = rf(ctx, userID, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Items)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, ...Filter) error); ok {
		r1 = rf(ctx, userID, filters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockrepository_all_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'all'
type Mockrepository_all_Call struct {
	*mock.Call
}

// all is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - filters ...Filter
func (_e *Mockrepository_Expecter) all(ctx interface{}, userID interface{}, filters ...interface{}) *Mockrepository_all_Call {
	return &Mockrepository_all_Call{Call: _e.mock.On("all",
		append([]interface{}{ctx, userID}, filters...)...)}
}

func (_c *Mockrepository_all_Call) Run(run func(ctx context.Context, userID pgtype.UUID, filters ...Filter)) *Mockrepository_all_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Filter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Filter)
			}
		}
		run(args[0].(context.Context), args[1].(pgtype.UUID), variadicArgs...)
	})
	return _c
}

func (_c *Mockrepository_all_Call) Return(_a0 *Items, _a1 error) *Mockrepository_all_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockrepository_all_Call) RunAndReturn(run func(context.Context, pgtype.UUID, ...Filter) (*Items, error)) *Mockrepository_all_Call {
	_c.Call.Return(run)
	return _c
}

// byID provides a mock function with given fields: ctx, userID, id
func (_m *Mockrepository) byID(ctx context.Context, userID pgtype.UUID, id pgtype.UUID) (*Item, error) {
	ret := _m.Called(ctx, userID, id)

	var r0 *Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, pgtype.UUID) (*Item, error)); ok {
		return rf(ctx, userID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, pgtype.UUID) *Item); ok {
		r0 = rf(ctx, userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, pgtype.UUID) error); ok {
		r1 = rf(ctx, userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockrepository_byID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'byID'
type Mockrepository_byID_Call struct {
	*mock.Call
}

// byID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - id pgtype.UUID
func (_e *Mockrepository_Expecter) byID(ctx interface{}, userID interface{}, id interface{}) *Mockrepository_byID_Call {
	return &Mockrepository_byID_Call{Call: _e.mock.On("byID", ctx, userID, id)}
}

func (_c *Mockrepository_byID_Call) Run(run func(ctx context.Context, userID pgtype.UUID, id pgtype.UUID)) *Mockrepository_byID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *Mockrepository_byID_Call) Return(_a0 *Item, _a1 error) *Mockrepository_byID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockrepository_byID_Call) RunAndReturn(run func(context.Context, pgtype.UUID, pgtype.UUID) (*Item, error)) *Mockrepository_byID_Call {
	_c.Call.Return(run)
	return _c
}

// copy provides a mock function with given fields: ctx, userID, toCopy
func (_m *Mockrepository) copy(ctx context.Context, userID pgtype.UUID, toCopy ToCopy) (bool, bool, *Item, error) {
	ret := _m.Called(ctx, userID, toCopy)

	var r0 bool
	var r1 bool
	var r2 *Item
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, ToCopy) (bool, bool, *Item, error)); ok {
		return rf(ctx, userID, toCopy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, ToCopy) bool); ok {
		r0 = rf(ctx, userID, toCopy)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, ToCopy) bool); ok {
		r1 = rf(ctx, userID, toCopy)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, pgtype.UUID, ToCopy) *Item); ok {
		r2 = rf(ctx, userID, toCopy)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*Item)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, pgtype.UUID, ToCopy) error); ok {
		r3 = rf(ctx, userID, toCopy)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Mockrepository_copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'copy'
type Mockrepository_copy_Call struct {
	*mock.Call
}

// copy is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - toCopy ToCopy
func (_e *Mockrepository_Expecter) copy(ctx interface{}, userID interface{}, toCopy interface{}) *Mockrepository_copy_Call {
	return &Mockrepository_copy_Call{Call: _e.mock.On("copy", ctx, userID, toCopy)}
}

func (_c *Mockrepository_copy_Call) Run(run func(ctx context.Context, userID pgtype.UUID, toCopy ToCopy)) *Mockrepository_copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(ToCopy))
	})
	return _c
}

func (_c *Mockrepository_copy_Call) Return(isItemExistExist bool, isCopied bool, newItem *Item, err error) *Mockrepository_copy_Call {
	_c.Call.Return(isItemExistExist, isCopied, newItem, err)
	return _c
}

func (_c *Mockrepository_copy_Call) RunAndReturn(run func(context.Context, pgtype.UUID, ToCopy) (bool, bool, *Item, error)) *Mockrepository_copy_Call {
	_c.Call.Return(run)
	return _c
}

// delete provides a mock function with given fields: ctx, userID, itemID
func (_m *Mockrepository) delete(ctx context.Context, userID pgtype.UUID, itemID pgtype.UUID) (bool, error) {
	ret := _m.Called(ctx, userID, itemID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, pgtype.UUID) (bool, error)); ok {
		return rf(ctx, userID, itemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, pgtype.UUID) bool); ok {
		r0 = rf(ctx, userID, itemID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, pgtype.UUID) error); ok {
		r1 = rf(ctx, userID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockrepository_delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'delete'
type Mockrepository_delete_Call struct {
	*mock.Call
}

// delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - itemID pgtype.UUID
func (_e *Mockrepository_Expecter) delete(ctx interface{}, userID interface{}, itemID interface{}) *Mockrepository_delete_Call {
	return &Mockrepository_delete_Call{Call: _e.mock.On("delete", ctx, userID, itemID)}
}

func (_c *Mockrepository_delete_Call) Run(run func(ctx context.Context, userID pgtype.UUID, itemID pgtype.UUID)) *Mockrepository_delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *Mockrepository_delete_Call) Return(_a0 bool, _a1 error) *Mockrepository_delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockrepository_delete_Call) RunAndReturn(run func(context.Context, pgtype.UUID, pgtype.UUID) (bool, error)) *Mockrepository_delete_Call {
	_c.Call.Return(run)
	return _c
}

// searchSavedNames provides a mock function with given fields: ctx, userID, searchPattern, limit
func (_m *Mockrepository) searchSavedNames(ctx context.Context, userID pgtype.UUID, searchPattern string, limit int) (*[]string, error) {
	ret := _m.Called(ctx, userID, searchPattern, limit)

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, string, int) (*[]string, error)); ok {
		return rf(ctx, userID, searchPattern, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, string, int) *[]string); ok {
		r0 = rf(ctx, userID, searchPattern, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, string, int) error); ok {
		r1 = rf(ctx, userID, searchPattern, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockrepository_searchSavedNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'searchSavedNames'
type Mockrepository_searchSavedNames_Call struct {
	*mock.Call
}

// searchSavedNames is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - searchPattern string
//   - limit int
func (_e *Mockrepository_Expecter) searchSavedNames(ctx interface{}, userID interface{}, searchPattern interface{}, limit interface{}) *Mockrepository_searchSavedNames_Call {
	return &Mockrepository_searchSavedNames_Call{Call: _e.mock.On("searchSavedNames", ctx, userID, searchPattern, limit)}
}

func (_c *Mockrepository_searchSavedNames_Call) Run(run func(ctx context.Context, userID pgtype.UUID, searchPattern string, limit int)) *Mockrepository_searchSavedNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *Mockrepository_searchSavedNames_Call) Return(_a0 *[]string, _a1 error) *Mockrepository_searchSavedNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockrepository_searchSavedNames_Call) RunAndReturn(run func(context.Context, pgtype.UUID, string, int) (*[]string, error)) *Mockrepository_searchSavedNames_Call {
	_c.Call.Return(run)
	return _c
}

// update provides a mock function with given fields: ctx, userID, item
func (_m *Mockrepository) update(ctx context.Context, userID pgtype.UUID, item Item) (bool, error) {
	ret := _m.Called(ctx, userID, item)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, Item) (bool, error)); ok {
		return rf(ctx, userID, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID, Item) bool); ok {
		r0 = rf(ctx, userID, item)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID, Item) error); ok {
		r1 = rf(ctx, userID, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockrepository_update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'update'
type Mockrepository_update_Call struct {
	*mock.Call
}

// update is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.UUID
//   - item Item
func (_e *Mockrepository_Expecter) update(ctx interface{}, userID interface{}, item interface{}) *Mockrepository_update_Call {
	return &Mockrepository_update_Call{Call: _e.mock.On("update", ctx, userID, item)}
}

func (_c *Mockrepository_update_Call) Run(run func(ctx context.Context, userID pgtype.UUID, item Item)) *Mockrepository_update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID), args[2].(Item))
	})
	return _c
}

func (_c *Mockrepository_update_Call) Return(_a0 bool, _a1 error) *Mockrepository_update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockrepository_update_Call) RunAndReturn(run func(context.Context, pgtype.UUID, Item) (bool, error)) *Mockrepository_update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrepository creates a new instance of Mockrepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockrepository {
	mock := &Mockrepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
