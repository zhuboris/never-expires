// Code generated by mockery v2.32.0. DO NOT EDIT.

package item

import mock "github.com/stretchr/testify/mock"

// MockFilter is an autogenerated mock type for the Filter type
type MockFilter struct {
	mock.Mock
}

type MockFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilter) EXPECT() *MockFilter_Expecter {
	return &MockFilter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockFilter) Execute() (string, interface{}) {
	ret := _m.Called()

	var r0 string
	var r1 interface{}
	if rf, ok := ret.Get(0).(func() (string, interface{})); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() interface{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockFilter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockFilter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockFilter_Expecter) Execute() *MockFilter_Execute_Call {
	return &MockFilter_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockFilter_Execute_Call) Run(run func()) *MockFilter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilter_Execute_Call) Return(sql string, param interface{}) *MockFilter_Execute_Call {
	_c.Call.Return(sql, param)
	return _c
}

func (_c *MockFilter_Execute_Call) RunAndReturn(run func() (string, interface{})) *MockFilter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilter creates a new instance of MockFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilter {
	mock := &MockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
